{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/auth.service\";\nlet AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    _authService;\n    constructor(_authService) {\n      this._authService = _authService;\n    }\n    intercept(req, next) {\n      const token = localStorage.getItem('token');\n      const refreshToken = localStorage.getItem('refreshToken');\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authReq).pipe(catchError(error => {\n        if (error.status === 401 && error.error === 'TokenExpired') {\n          this._authService.refreshToken(token, refreshToken).subscribe(res => {\n            localStorage.setItem('token', res.token);\n            localStorage.setItem('refreshToken', res.refreshToken);\n            const newAuthReq = req.clone({\n              headers: req.headers.set('Authorization', `Bearer ${res.token}`)\n            });\n            return next.handle(newAuthReq);\n          }, err => {\n            console.log(err.message);\n          });\n        }\n        return throwError(error);\n      }));\n    }\n    static ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();\nexport { AuthInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}